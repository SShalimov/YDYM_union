# -*- coding: utf-8 -*-
#Объединения метрики и директа
import requests
from requests.exceptions import ConnectionError
from time import sleep
from datetime import datetime
import json
import os
import sys
import pandas as pd
from pandas import Series,DataFrame
import csv

################# --- Входные данные --- #################
##Путь к результирующему файлу
path = 'C:/Users/User_03/Py/'

## Период
dat1 = "2023-03-01"
dat2 = "2023-07-09"

# OAuth-токен пользователя, от имени которого будут выполняться запросы
token = '<Token>' #OAuth-токен

# Логин клиента рекламного агентства. Обязательный параметр, если запросы выполняются от имени рекламного агентства
clientLogin = '<client login YDirect...>'

#Лимит количества записей в ЯМетрике
limit = 100000

# Номер метрики в настройках метрики
ids = "<nomer YMetriki " # Номер ЯМетрики
 
################ --- Входные данные --- #################


# По поисковым фразам запросам, показы, клики
# Метод для корректной обработки строк в кодировке UTF-8 как в Python 3, так и в Python 2
if sys.version_info < (3,):
    def u(x):
        try:
            return x.encode("utf8")
        except UnicodeDecodeError:
            return x
else:
    def u(x):
        if type(x) == type(b''):
            return x.decode('utf8')
        else:
            return x

# Адрес сервиса Reports для отправки JSON-запросов (регистрозависимый)
ReportsURL = 'https://api.direct.yandex.com/json/v5/reports' 

# --- Подготовка запроса Директа---
print('Подготовка данных Директа')
# Создание HTTP-заголовков запроса 
headers = {
           # OAuth-токен. Использование слова Bearer обязательно
           "Authorization": "Bearer " + token,
           # Логин клиента рекламного агентства
           "Client-Login": clientLogin,
           # Язык ответных сообщений
           "Accept-Language": "ru",
           # Режим формирования отчета
           "processingMode": "auto",
           # Формат денежных значений в отчете
           "returnMoneyInMicros": "false",
           # Не выводить в отчете строку с названием отчета и диапазоном дат
           "skipReportHeader": "true",
           # Не выводить в отчете строку с названиями полей
           #"skipColumnHeader": "true",
           # Не выводить в отчете строку с количеством строк статистики
           "skipReportSummary": "true"
           }

# Создание тела запроса Директа
body = {
    "params": {
        "SelectionCriteria": {
            "DateFrom": dat1,
            "DateTo": dat2
            	
        },
        "Goals": ["224998106"],
        "AttributionModels": ["LSC"],
        "FieldNames": [
            "Date",
            "CampaignName",
            "Impressions",
            "Clicks",
            "Cost"
        ],
        "ReportName": u("Ydirect"),
        "ReportType": "CAMPAIGN_PERFORMANCE_REPORT",
        "DateRangeType": "CUSTOM_DATE",
        "Format": "TSV",
        "IncludeVAT": "YES",
        "IncludeDiscount": "NO"
     
    }
}

#Date = Дата, Query = поисковая фраза, CampaignName = наименование компании
#LocationOfPresenceName = регион показа, Placement = площадка показа, Slot = блок показа,
#Impressions=количество показов, Clicks=клики, Cost = стоимость кликов,
#Conversions = количество целевый визитов по ЯМ, Revenue = Доход по цели, Goals = цель ЯМ,
#AttributionModels = атрибуция,LSC = последний значимый клик

# Кодирование тела запроса в JSON
body = json.dumps(body, indent=4)

# --- Запуск цикла для выполнения запросов ---
# Если получен HTTP-код 200, то выводится содержание отчета
# Если получен HTTP-код 201 или 202, выполняются повторные запросы
while True:
    try:
        req = requests.post(ReportsURL, body, headers=headers)
        if req.status_code == 400:
            print('Код ответа HTTP: ', req.status_code)
            print("Параметры запроса указаны неверно или достигнут лимит отчетов в очереди")
            print("RequestId: {}".format(req.headers.get("RequestId", False)))
            print("JSON-код запроса: {}".format(u(body)))
            print("JSON-код ответа сервера: \n{}".format(u(req.json())))
            break

#--------------200------------------
        elif req.status_code == 200:
            print('Код ответа HTTP: ',req.status_code)
            print("Отчет создан успешно")
            break
#------------------------------------
        
        elif req.status_code == 201:
            print('Код ответа HTTP: ',req.status_code)
            print("Отчет успешно поставлен в очередь в режиме офлайн")
            retryIn = int(req.headers.get("retryIn", 30))
            print("Повторная отправка запроса через {} секунд".format(retryIn))
            print("RequestId: {}".format(req.headers.get("RequestId", False)))
            sleep(retryIn)
        elif req.status_code == 202:
            print('Код ответа HTTP: ',req.status_code)
            print("Отчет формируется в режиме офлайн")
            retryIn = int(req.headers.get("retryIn", 60))
            print("Повторная отправка запроса через {} секунд".format(retryIn))
            print("RequestId:  {}".format(req.headers.get("RequestId", False)))
            sleep(retryIn)
        elif req.status_code == 500:
            print('Код ответа HTTP: ',req.status_code)
            print("При формировании отчета произошла ошибка. Пожалуйста, попробуйте повторить запрос позднее")
            print("RequestId: {}".format(req.headers.get("RequestId", False)))
            print("JSON-код ответа сервера: \n{}".format(u(req.json())))
            break
        elif req.status_code == 502:
            print('Код ответа HTTP: ',req.status_code)
            print("Время формирования отчета превысило серверное ограничение.")
            print("Пожалуйста, попробуйте изменить параметры запроса - уменьшить период и количество запрашиваемых данных.")
            print("JSON-код запроса: {}".format(body))
            print("RequestId: {}".format(req.headers.get("RequestId", False)))
            print("JSON-код ответа сервера: \n{}".format(u(req.json())))
            break
        else:
            print("Произошла непредвиденная ошибка")
            print("RequestId:  {}".format(req.headers.get("RequestId", False)))
            print("JSON-код запроса: {}".format(body))
            print("JSON-код ответа сервера: \n{}".format(u(req.json())))
            break

    # Обработка ошибки, если не удалось соединиться с сервером API Директа
    except ConnectionError:
        # В данном случае надо повторить запрос позднее
        print("Произошла ошибка соединения с сервером API")
        break

    # Если возникла какая-либо другая ошибка
    except:
        print("Произошла непредвиденная ошибка")
        break
##print(req.text, type(req.text))

result_YD1 = req.text.split('\n')
result_YD = {}
for i in range(1,len(result_YD1)-1):
    result_YD [i] = {
            'Дата':result_YD1[i].split('\t')[0],
            'Кампания':result_YD1[i].split('\t')[1],
            'ПоказыЯД':int(result_YD1[i].split('\t')[2]),
            'КликиЯД':int(result_YD1[i].split('\t')[3]),
            'СтоимостьЯД':float(result_YD1[i].split('\t')[4])
            }
#print(result_YD, type(result_YD))
df_keys = ['Дата','Кампания','ПоказыЯД','КликиЯД','СтоимостьЯД']
df_YD = pd.DataFrame.from_dict(result_YD, orient='index',columns=df_keys)
df_YD['Дата'] = df_YD['Дата'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))
print(df_YD)
df_YD.to_excel(path + dat1 + '-' + dat2 +'df_YD.xlsx',sheet_name='data',index= False)

# Получение данных из Яндекс Метрики по Покупкам 
print('Подготовка данных из Метрики')
# Адрес api метода для запроса get 
url_param = "https://api-metrika.yandex.ru/stat/v1/data"

api_param = {
    "ids":ids,
    "metrics":"\
                ym:s:users,\
                ym:s:visits,\
                ym:s:bounceRate,\
                ym:s:ecommerceRevenue,\
                ym:s:ecommercePurchases\
                ",
    
    "dimensions":"\
                ym:s:date,\
                ym:s:<attribution>SourceEngine,\
                ym:s:<attribution>DirectClickOrder\
                ",
    "date1":dat1,
    "date2":dat2,
    "sort":"ym:s:date",
    "accuracy":"full",
    "limit":limit    
    }
header_params = {
    'GET': '/management/v1/counters HTTP/1.1',
    'Host': 'api-metrika.yandex.ru',
    'Authorization': 'OAuth ' + token,
    'Content-Type': 'application/x-yametrika+json',
    "skipReportHeader": "true",
    "skipReportSummary": "true"
    }
# Запрос GET
response = requests.get(
    url_param,
    params=api_param,
    headers=header_params
)
result = response.json()
##print("result:", result, "result type:",type(result)) #Отладка
data = result['data']
##print("data:",data,"data type:",type(data)) #Отладка
print("Код ответа HTTP: " + str(response.status_code))  

dict_data = {}

# Разбираем data в словарь 
for i in range(0, len(data)-1):
        dict_data[i] = {
                        'Дата':data[i]["dimensions"][0]["name"],#Дата
                        'РекСистема':data[i]["dimensions"][1]["name"],#Рекламная система
                        'Кампания': data[i]["dimensions"][2]["name"],#Кампания ЯД
                        'ПользователиЯМ': data[i]["metrics"][0],#Уникальные посетители
                        'ВизитыЯМ': data[i]["metrics"][1],#Визиты
                        'ОтказыЯМ': data[i]["metrics"][2],#Доля визитов, в рамках которых состоялся лишь один просмотр страницы, продолжавшийся менее 15 секунд
                        'ДоходЯМ': data[i]["metrics"][3],#Доход
                        'ПокупокЯМ':data[i]["metrics"][4]#Количество покупок
                        }
#Создаем и заполняем Дата Фрейм (DF) из словаря 
dict_keys = dict_data[0].keys()

df_YM = pd.DataFrame.from_dict(dict_data, orient='index',columns=dict_keys)
#Переводим в DF дату в datetime64[ns]
df_YM['Дата'] = df_YM['Дата'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))

df_YMInd = df_YM.query("РекСистема == 'Яндекс.Директ: Не определено'")
df_YMInd.to_excel(path + dat1 + '-' + dat2 +'df_YMIndefined.xlsx',sheet_name='data',index= False)

df_YM = df_YM.query("РекСистема == 'Яндекс: Директ'")

print(df_YM)
df_YM.to_excel(path + dat1 + '-' + dat2 +'df_YM.xlsx',sheet_name='data',index= False)

print('Подготовка сводного отчета')
df_sv = pd.merge(df_YD,df_YM,how='outer',on = ['Дата','Кампания'],left_on=None, right_on=None, left_index=False, right_index=False,suffixes=('_D','_M'))
df_sv['Неделя'] = df_sv['Дата'].dt.isocalendar().week
df_sv['Месяц'] = df_sv['Дата'].dt.month
df_sv['Год'] = df_sv['Дата'].dt.year

print(df_sv)
df_sv.to_excel(path + dat1 + '-' + dat2 +'df_YMYDunion.xlsx',sheet_name='data',index= False)
print('END')
